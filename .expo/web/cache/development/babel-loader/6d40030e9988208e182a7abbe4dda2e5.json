{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport AuthApi from \"../api/AuthApi\";\nvar registerIntern = function () {\n  var _ref = _asyncToGenerator(function* (user) {\n    var data = {\n      idIntern: user.idIntern,\n      email: user.email,\n      name: user.name,\n      password: user.password,\n      avatarUrl: user.avatarUrl,\n      userType: user.userType,\n      phoneNumber: user.phoneNumber,\n      city: user.city,\n      GPA: user.GPA,\n      institution: user.institution,\n      specialization: user.specialization,\n      description: user.description,\n      partnerID: user.partnerID\n    };\n    try {\n      var res = yield AuthApi.register(data);\n      console.log('success signup authmodel');\n    } catch (err) {\n      console.log(\"register failed: \" + err);\n    }\n  });\n  return function registerIntern(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar registerHospital = function () {\n  var _ref2 = _asyncToGenerator(function* (user) {\n    var data = {\n      email: user.email,\n      name: user.name,\n      password: user.password,\n      userType: user.userType,\n      phoneNumber: user.phoneNumber,\n      city: user.city,\n      hospitalQuantity: user.hospitalQuantity,\n      description: user.description\n    };\n    try {\n      var res = yield AuthApi.register(data);\n      console.log('success signup authmodel');\n    } catch (err) {\n      console.log(\"register failed: \" + err);\n    }\n  });\n  return function registerHospital(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar login = function () {\n  var _ref3 = _asyncToGenerator(function* (user) {\n    console.log('Log In User ' + JSON.stringify(user));\n    if (user.userType === 'intern') {\n      var intern = {\n        email: user.email,\n        name: user.name,\n        password: user.password,\n        avatarUrl: user.avatarUrl,\n        institution: user.institution,\n        specialization: user.specialization,\n        phoneNumber: user.phoneNumber,\n        GPA: user.GPA,\n        city: user.city,\n        description: user.description,\n        partnerID: user.partnerID,\n        userType: user.userType\n      };\n      try {\n        var res = yield AuthApi.login(intern);\n        var data = res.data;\n        if (typeof data.id === 'undefined') {\n          console.log('data err');\n          return data.id;\n        } else {\n          var accessToken = data.accessToken,\n            id = data.id,\n            refreshToken = data.refreshToken;\n          var userRes = [accessToken, id, refreshToken];\n          console.log('good data');\n          return userRes;\n        }\n      } catch (err) {\n        console.log('login failed:', err);\n        throw err;\n      }\n    } else if (user.userType === 'hospital') {\n      var hospital = {\n        email: user.email,\n        name: user.name,\n        password: user.password,\n        phoneNumber: user.phoneNumber,\n        city: user.city,\n        description: user.description,\n        userType: user.userType,\n        hospitalQuantity: user.hospitalQuantity\n      };\n      try {\n        var _res = yield AuthApi.login(hospital);\n        var _data = _res.data;\n        if (typeof _data.id === 'undefined') {\n          console.log('data err');\n          return _data.id;\n        } else {\n          var _accessToken = _data.accessToken,\n            _id = _data.id,\n            _refreshToken = _data.refreshToken;\n          var _userRes = [_accessToken, _id, _refreshToken];\n          console.log('good data');\n          return _userRes;\n        }\n      } catch (err) {\n        console.log('login failed:', err);\n        throw err;\n      }\n    } else {\n      throw new Error('Invalid user type');\n    }\n  });\n  return function login(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar logout = function () {\n  var _ref4 = _asyncToGenerator(function* () {\n    console.log(\"logout\");\n    yield AuthApi.logout();\n  });\n  return function logout() {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport default {\n  registerIntern: registerIntern,\n  registerHospital: registerHospital,\n  login: login,\n  logout: logout\n};","map":{"version":3,"names":["AuthApi","registerIntern","_ref","_asyncToGenerator","user","data","idIntern","email","name","password","avatarUrl","userType","phoneNumber","city","GPA","institution","specialization","description","partnerID","res","register","console","log","err","_x","apply","arguments","registerHospital","_ref2","hospitalQuantity","_x2","login","_ref3","JSON","stringify","intern","id","accessToken","refreshToken","userRes","hospital","Error","_x3","logout","_ref4"],"sources":["C:/Users/michael harush/Desktop/Front/model/AuthModel.tsx"],"sourcesContent":["import AuthApi from \"../api/AuthApi\";\r\nimport apiClient from \"../api/ClientApi\";\r\n\r\n\r\nexport type UserIntern = {\r\n  idIntern: String,\r\n  email: String,\r\n  name: String,\r\n  password: String,\r\n  avatarUrl: String,\r\n  institution:String,\r\n  specialization:String,\r\n  phoneNumber:String,\r\n  GPA:String,\r\n  city:String,\r\n  description:String,\r\n  partnerID:String,\r\n  userType:'intern',\r\n  preferenceArray: string[]\r\n}\r\nexport type UserHospital = {\r\n  email: String,\r\n  name: String,\r\n  password: String,\r\n  phoneNumber:String,\r\n  city:String,\r\n  description:String,\r\n  userType:'hospital'\r\n  hospitalQuantity:String,\r\n  preferenceArray: string[]\r\n\r\n\r\n}\r\n\r\n\r\nexport type Token = {\r\n    refreshtoken: string,\r\n}\r\n\r\ntype UserInfo = {\r\n    accessToken: string;\r\n    refreshToken: string;\r\n    id: string;\r\n};\r\n\r\nconst registerIntern = async (user: UserIntern) => {\r\n    const data = {\r\n      idIntern:user.idIntern,\r\n      email: user.email,\r\n      name: user.name,\r\n      password: user.password,\r\n      avatarUrl: user.avatarUrl,\r\n      userType:user.userType,\r\n      phoneNumber:user.phoneNumber,\r\n      city:user.city,\r\n      GPA:user.GPA,\r\n      institution:user.institution,\r\n      specialization:user.specialization,\r\n      description:user.description,\r\n      partnerID:user.partnerID\r\n    }\r\n    try {\r\n        const res = await AuthApi.register(data)\r\n        console.log('success signup authmodel')\r\n    } catch (err) {\r\n        console.log(\"register failed: \" + err)\r\n    }\r\n}\r\n\r\nconst registerHospital = async (user: UserHospital) => {\r\n  const data = {\r\n    email: user.email,\r\n    name: user.name,\r\n    password: user.password,\r\n    userType:user.userType,\r\n    phoneNumber:user.phoneNumber,\r\n    city:user.city,\r\n    hospitalQuantity:user.hospitalQuantity,\r\n    description:user.description\r\n  }\r\n  try {\r\n      const res = await AuthApi.register(data)\r\n      console.log('success signup authmodel')\r\n  } catch (err) {\r\n      console.log(\"register failed: \" + err)\r\n  }\r\n}\r\n\r\n// const login = async (user: User): Promise<string | UserInfo | any> => {\r\n//     const d = {\r\n//       email: user.email,\r\n//       name: user.name,\r\n//       password: user.password,\r\n//       avatarUrl: user.avatarUrl\r\n//     };\r\n//     try {\r\n//       const res = await AuthApi.login(d);\r\n//       const data: UserInfo | any = res.data;\r\n//       if (typeof data.id === 'undefined') {\r\n//         console.log('data err');\r\n//         return data.id as string;\r\n//       } else {\r\n//         const { accessToken, id, refreshToken } = data;\r\n//         const userRes = [accessToken, id, refreshToken];\r\n//         console.log('good data');\r\n//         return userRes;\r\n//       }\r\n//     } catch (err) {\r\n//       console.log('login failed:', err);\r\n//       throw err;\r\n//     }\r\n//   };\r\nexport type User = UserIntern | UserHospital;\r\nexport type UserLogIn={email:String,password:String}\r\nconst login = async (user: User): Promise<string | UserInfo | any> => {\r\n  console.log('Log In User '+JSON.stringify(user))\r\n  if (user.userType === 'intern') {\r\n    const intern = {\r\n      email: user.email,\r\n      name: user.name,\r\n      password: user.password,\r\n      avatarUrl: user.avatarUrl,\r\n      institution: user.institution,\r\n      specialization: user.specialization,\r\n      phoneNumber: user.phoneNumber,\r\n      GPA: user.GPA,\r\n      city: user.city,\r\n      description: user.description,\r\n      partnerID: user.partnerID,\r\n      userType: user.userType\r\n    };\r\n    try {\r\n      const res = await AuthApi.login(intern);\r\n      const data: UserInfo | any = res.data;\r\n      if (typeof data.id === 'undefined') {\r\n        console.log('data err');\r\n        return data.id as string;\r\n      } else {\r\n        const { accessToken, id, refreshToken } = data;\r\n        const userRes = [accessToken, id, refreshToken];\r\n        console.log('good data');\r\n        return userRes;\r\n      }\r\n    } catch (err) {\r\n      console.log('login failed:', err);\r\n      throw err;\r\n    }\r\n  } else if (user.userType === 'hospital') {\r\n    const hospital = {\r\n      email: user.email,\r\n      name: user.name,\r\n      password: user.password,\r\n      phoneNumber: user.phoneNumber,\r\n      city: user.city,\r\n      description: user.description,\r\n      userType: user.userType,\r\n      hospitalQuantity: user.hospitalQuantity\r\n    };\r\n    try {\r\n      const res = await AuthApi.login(hospital);\r\n      const data: UserInfo | any = res.data;\r\n      if (typeof data.id === 'undefined') {\r\n        console.log('data err');\r\n        return data.id as string;\r\n      } else {\r\n        const { accessToken, id, refreshToken } = data;\r\n        const userRes = [accessToken, id, refreshToken];\r\n        console.log('good data');\r\n        return userRes;\r\n      }\r\n    } catch (err) {\r\n      console.log('login failed:', err);\r\n      throw err;\r\n    }\r\n  } else {\r\n    throw new Error('Invalid user type');\r\n  }\r\n};\r\n\r\n\r\n  const logout = async (): Promise<void> => {\r\n    console.log(\"logout\");\r\n    await AuthApi.logout();\r\n  };\r\n\r\nexport default {registerIntern,registerHospital, login, logout}"],"mappings":"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"},"metadata":{},"sourceType":"module"}